
큐 정의
https://namu.wiki/w/%ED%81%90(%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0)
; 간단히 말해, 자료의 입출력이 각각 한 쪽 끝으로 제한됨

큐는 스택(FILO, First In Last Out)과 달리 FIFO(First In First Out)의 형태로 저장되는 형식을 말하는데
보통 자료의 입력이 이루어지는 포인터를 rear, 자료의 출력이 이루어지는 포인터를 front로 표현합니다.
또한 큐에 자료를 한 개 집어넣는 동작을 ‘인큐(enqueue)’, 큐 안에 있는 자료를 한 개 꺼내는 동작을 ‘디큐(dequeue)’라고 표현합니다.

아래 그림을 보면서 이해하시면 좋을 것 같습니다.

￼

선형 큐의 단점을 개선한 원형큐, 링크드큐등 있습니다만 앞서 말씀드린 내용으로도 이번주 문제 이해가 가능하므로 참고만 부탁드립니다.

그럼 오늘의 알고리즘 문제입니다.

오늘의 목표는 큐의 개념을 이해하고 구현하는 것 입니다.

문제 1
정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
명령은 총 여섯 가지이다.
* push X: 정수 X를 큐에 넣는 연산이다.
* pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
* size: 큐에 들어있는 정수의 개수를 출력한다.
* empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
* front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
* back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.

입력
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
https://www.acmicpc.net/problem/10845


문제 2
회문(palindrome)이란 단어, 숫자, 혹은 구문인데 앞에서 뒤로 읽나 거꾸로 읽나 같게 읽히는 경우를 말한다. 
이를 테면 이름 'anna'는 회문이다. 숫자도 물론 회문이 될 수 있습니다(예를 들어 151 753357). 
추가로 이러한 수들은 당연히 크기순으로 정렬 될 수 있다. 처음 몇 개의 회문들은 이와 같다:
 
1 2 3 4 5 6 7 8 9 11 22 33....
 
10은 회문이 아니다(10을 010처럼 쓰더라도...) - 0으로 시작하는 수는 허용되지 않는다. 
찾고자하는 회문의 번째 수를 입력했을 때, 그에 해당하는 회문을 출력하는 프로그램을 작성하라.

입력
입력은 여러 줄로 이루어져 있으며 매 줄에 정수 N (1≤N≤2*109)이 입력된다.
한 줄에 정수 0이 입력되면 더 이상 프로그램을 실행하지 않는다.

출력
입력을 받은 순서대로 1부터 시작해서 N번째로 나오는 회문을 한 줄에 하나씩 출력한다.
http://hancom.jungol.co.kr/bbs/board.php?bo_table=pbank&wr_id=1213&sca=50&page=10


문제 3
Implement the following operations of a queue using stacks.
* push(x) -- Push element x to the back of queue.
* pop() -- Removes the element from in front of queue.
* peek() -- Get the front element.
* empty() -- Return whether the queue is empty.

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false

* You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
* Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
* You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

https://leetcode.com/problems/implement-queue-using-stacks/

문제 4
Implement the following operations of a stack using queues.
* push(x) -- Push element x onto stack.
* pop() -- Removes the element on top of the stack.
* top() -- Get the top element.
* empty() -- Return whether the stack is empty.

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false

* You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
* Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
* You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

https://leetcode.com/problems/implement-stack-using-queues/

참조:
https://atoz-develop.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90-%EC%A0%95%EB%A6%AC-%EB%B0%8F-%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C
https://thebook.io/006935/part04/ch13/
https://blog.hexabrain.net/213
https://m.blog.naver.com/PostView.nhn?blogId=powhy123&logNo=221009290191&proxyReferer=https:%2F%2Fwww.google.com%2F

